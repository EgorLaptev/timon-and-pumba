'use strict';import {Pumba} from "./Pumba.js";import {Caterpillar} from "./Caterpillar.js";import {Hyena} from "./Hyena.js";import {Control} from "./Control.js";import {Collision} from "./Collision.js";import {Panel} from "./Panel.js";import {Timer} from "./Timer.js";export class Game{    static cnv = null;    static ctx = null;    static time = 0; // In seconds    static bgImage = '../Media/Фоны/background-1.png';    static bgAudio = new Audio('../Media/Music/41461198_326895439.mp3');    static isStart = false;    static onPause = false;    static start()    {        Game.isStart = true;        /* Start music */        Game.bgAudio.play();        Game.bgAudio.loop = true;        /* Set start position */        Pumba.x = 25;        Pumba.y = Game.cnv.height/2;        Game.generateEntities(); // Generate hyenas & caterpillars        Control.define(); // Set controls        Timer.start(); // Start timer        /* 1sec - 1hp */        setInterval(()=> {            if(!Game.onPause && Pumba.health > 0) Pumba.health--        }, 1000);        /* Start main game loop */        Game.loop();    }    static loop()    {        if(!Game.onPause) {            if(Pumba.health <= 0) Game.gameOver(); // Check player's health            Game.time = Timer.time; // Synchronize & update time            Game.movement();            Game.collisions();            Game.render();        }        requestAnimationFrame(Game.loop);    }    static render()    {        /* Background */        let bg = new Image();        bg.src = Game.bgImage;        Game.ctx.drawImage(bg, 0, 0, Game.cnv.width, Game.cnv.height);        /* Entities */        Pumba.render(Game.cnv);        Caterpillar.render(Game.cnv);        Hyena.render(Game.cnv);        Panel.render(Pumba.name , Pumba.points, Pumba.health, Game.time);    }    static movement()    {        /* Pumba */        Pumba.skin = '../media/Пумба/Pumbaa02.png';        if(Control.pressedKeys[39]) {            Pumba.x += Pumba.speed;            Pumba.skin = '../media/Пумба/Pumbaa04.png'        } // Right        if(Control.pressedKeys[37]) {            Pumba.x -= Pumba.speed;            Pumba.skin = '../media/Пумба/Pumbaa03.png'        } // Left        if(Control.pressedKeys[38] && !Control.inJump) { // Jump            Control.inJump = true; // Block double jump            Pumba.y -= Pumba.jumpHeight;            setTimeout(()=>{                Pumba.y += Pumba.jumpHeight;                setTimeout(()=> Control.inJump = false, 150);            }, 750) // Jump duration        }        /* Hyenas */        Hyena.list.forEach(hyena => {           if( hyena.x >= hyena.startX + 200 ||               hyena.x <= hyena.startX - 200 ) hyena.speed = -hyena.speed;           hyena.x += hyena.speed;        });    }    static generateEntities()    {        /* Caterpillars */        Caterpillar.generate(50, Game.cnv.height/2-100, Game.cnv.width-50, Game.cnv.height/2);        /* Hyenas */        Hyena.generate(200, Game.cnv.height/2+25, Game.cnv.width-100, Game.cnv.height/2+25);    }    static collisions()    {        /* Pumba & caterpillars*/        Caterpillar.list.forEach((caterpillar, i) => {            if(Collision.check(Pumba, caterpillar)) { // Eat                Caterpillar.list.splice(i, 1);                Caterpillar.generate(50, Game.cnv.height/2-100, Game.cnv.width-50, Game.cnv.height/2);                Pumba.points++;                Pumba.health += Caterpillar.regen;            }        });        let heynasDamage = false;        /* Pumba & hyenas */        Hyena.list.forEach((hyena, i) => {            if(Collision.check(Pumba, hyena)) { // Eat                heynasDamage = true;            } else heynasDamage = false;        });    }    /* On/Off pause in game */    static pause()    {        Game.onPause = !Game.onPause        if(Game.onPause) {            Game.bgAudio.pause();            Timer.pause();        }        else {            Game.bgAudio.play();            Timer.start(Game.time);        };    }    static gameOver()    {        if(!Game.isStart) return 0;        /* Stopping the game */        Game.isStart = false;        Timer.pause();        Game.bgAudio.pause();        /* Save progress */        if(!localStorage.getItem('leaders')) {            localStorage.setItem('leaders', JSON.stringify([                {                    name: Pumba.name,                    points: 1000 - Game.time + Pumba.points * 10                }            ]));        } else {            let leaders = JSON.parse(localStorage.getItem('leaders'));            leaders.push({                name: Pumba.name,                points: 1000 - Game.time + Pumba.points * 10            });            localStorage.setItem('leaders', JSON.stringify(leaders));        }        let loseScreen = document.getElementById('loseScreen');        loseScreen.style.display = 'flex';    }}